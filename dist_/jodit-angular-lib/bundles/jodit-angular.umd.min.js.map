{"version":3,"sources":["ng://jodit-angular/lib/Events.ts","ng://jodit-angular/lib/jodit-angular.component.ts","ng://jodit-angular/lib/jodit-angular.module.ts"],"names":["Events","this","onChange","EventEmitter","onBeforeEnter","onKeydown","onMousedown","onClick","onFocus","onBlur","onPaste","onResize","onBeforeCommand","onAfterCommand","onAfterExec","onAfterPaste","onChangeSelection","Output","validEvents","EditorModule","require","CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","JoditAngularComponent","multi","_super","elementRef","ngZone","_this","call","_config","tagName","__extends","Object","defineProperty","prototype","v","element","resetEditor","createElement","document","id","defaultValue","nativeElement","appendChild","editor","getEditorValue","setEditorValue","destruct","createEditor","ngAfterViewInit","runOutsideAngular","Jodit","config","value","events","on","onChangeCallback","run","onTouchedCallback","forEach","eventName","eventEmitter","observers","length","eventNameInJodit","substring","substr","toLowerCase","args","_i","arguments","emit","ngOnDestroy","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","setReadOnly","Component","selector","template","encapsulation","ViewEncapsulation","None","providers","ElementRef","NgZone","Input","JoditAngularModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Output, EventEmitter} from '@angular/core';\r\n\r\nexport interface EventObj {\r\n  args: any[];\r\n  editor: any;\r\n}\r\n\r\nexport class Events {\r\n  // tslint:disable:no-output-on-prefix\r\n  @Output() onChange: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onBeforeEnter: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onKeydown: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onMousedown: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onClick: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onFocus: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onBlur: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onPaste: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onResize: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onBeforeCommand: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onAfterCommand: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onAfterExec: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onAfterPaste: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onChangeSelection: EventEmitter<EventObj> = new EventEmitter();\r\n}\r\n\r\n\r\nexport const validEvents: (keyof Events)[] = [\r\n  'onChange',\r\n  'onBeforeEnter',\r\n  'onKeydown',\r\n  'onMousedown',\r\n  'onClick',\r\n  'onFocus',\r\n  'onBlur',\r\n  'onPaste',\r\n  'onResize',\r\n  'onBeforeCommand',\r\n  'onAfterCommand',\r\n  'onAfterExec',\r\n  'onAfterPaste',\r\n  'onChangeSelection',\r\n];\r\n","import {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    forwardRef,\r\n    Input,\r\n    NgZone,\r\n    OnDestroy,\r\n    Provider,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Events, validEvents} from './Events';\r\n\r\n\r\ndeclare const require: any;\r\nconst EditorModule: any = require('jodit');\r\n\r\n\r\nconst CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => JoditAngularComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'jodit-editor',\r\n    template: `\r\n        <ng-template></ng-template>`,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['../../../../node_modules/jodit/build/jodit.min.css'],\r\n    providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class JoditAngularComponent extends Events implements AfterViewInit, OnDestroy, ControlValueAccessor {\r\n\r\n    @Input()\r\n    set config(v: object | undefined) {\r\n        this._config = v;\r\n        if (this.element) {\r\n            this.resetEditor();\r\n        }\r\n    }\r\n\r\n    get config() {\r\n        return this._config;\r\n    }\r\n\r\n    private _config = {};\r\n\r\n    @Input() tagName = 'textarea';\r\n    @Input() id: string | undefined;\r\n    @Input() defaultValue: string | undefined;\r\n\r\n    element: HTMLInputElement;\r\n    editor: any;\r\n\r\n    private onChangeCallback: (_: any) => {};\r\n    private onTouchedCallback: () => {};\r\n\r\n    constructor(private elementRef: ElementRef, private ngZone: NgZone) {\r\n        super();\r\n        this.elementRef = elementRef;\r\n        this.ngZone = ngZone;\r\n    }\r\n\r\n    createElement() {\r\n        const tagName = typeof this.tagName === 'string' ? this.tagName : 'textarea';\r\n        this.element = <HTMLInputElement>document.createElement(tagName);\r\n        if (this.element) {\r\n            this.element.id = this.id; \r\n            this.element[\"value\"] = this.defaultValue;\r\n            this.elementRef.nativeElement.appendChild(this.element);\r\n        }\r\n    }\r\n\r\n\r\n    get value(): string {\r\n        if (this.editor) {\r\n            return this.editor.getEditorValue();\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    set value(v: string) {\r\n        if (this.editor) {\r\n            this.editor.setEditorValue(v || '');\r\n        } else {\r\n            this.defaultValue = v;\r\n        }\r\n    }\r\n\r\n    resetEditor() {\r\n        this.editor.destruct();\r\n        this.createEditor();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (!this.element) {\r\n            this.createElement();\r\n            this.createEditor();\r\n        }\r\n    }\r\n\r\n    createEditor() {\r\n        // Create instance outside Angular scope\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.editor = new EditorModule.Jodit(this.element, this.config);\r\n        });\r\n\r\n        if (this.defaultValue) {\r\n            this.editor.value = this.defaultValue;\r\n        }\r\n\r\n        this.editor.events\r\n            .on('change', (value: string) => {\r\n                if (typeof this.onChangeCallback === 'function') {\r\n                    this.ngZone.run(() => this.onChangeCallback(value));\r\n                }\r\n            })\r\n            .on('blur', () => {\r\n                if (typeof this.onTouchedCallback === 'function') {\r\n                    this.ngZone.run(() => this.onTouchedCallback());\r\n                }\r\n            });\r\n\r\n\r\n        validEvents.forEach((eventName) => {\r\n            const eventEmitter: EventEmitter<any> = this[eventName];\r\n            if (eventEmitter.observers.length > 0) {\r\n                let eventNameInJodit = eventName.substring(2);\r\n                eventNameInJodit = eventNameInJodit.substr(0, 1).toLowerCase() + eventNameInJodit.substring(1);\r\n                // tslint:disable-next-line:max-line-length\r\n                this.editor.events.on(eventNameInJodit, this.ngZone.run(() => (...args: any[]) => eventEmitter.emit({\r\n                    args,\r\n                    editor: this.editor\r\n                })));\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.editor) {\r\n            this.editor.destruct();\r\n        }\r\n    }\r\n\r\n    writeValue(v: any): void {\r\n        this.value = v;\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeCallback = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => {}): void {\r\n        this.onTouchedCallback = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.editor.setReadOnly(isDisabled);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { JoditAngularComponent } from './jodit-angular.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [JoditAngularComponent],\r\n  exports: [\r\n      JoditAngularComponent\r\n  ]\r\n})\r\n\r\nexport class JoditAngularModule { }\r\n"]}